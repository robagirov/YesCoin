/**
 * Generated by orval v6.25.0 üç∫
 * Do not edit manually.
 * YesCoin-API
 * OpenAPI spec version: 0.1.0
 */
import { useMutation, useQuery } from "@tanstack/react-query";
import type {
  MutationFunction,
  QueryFunction,
  QueryKey,
  UseMutationOptions,
  UseQueryOptions,
  UseQueryResult,
} from "@tanstack/react-query";
import axios from "axios";
import type { AxiosError, AxiosRequestConfig, AxiosResponse } from "axios";
import type {
  AddUserUsersPost200,
  GetUserUsersGet200,
  GetUserUsersGetParams,
  HTTPValidationError,
  TapUsersTapPut200,
  TapUsersTapPutParams,
  UpdateUserInfoUsersPut200,
  UserCreate,
  UserUpdate,
} from "./model";

/**
 * @summary Get User
 */
export const getUserUsersGet = (
  params: GetUserUsersGetParams,
  options?: AxiosRequestConfig,
): Promise<AxiosResponse<GetUserUsersGet200>> => {
  return axios.get(`/users`, {
    ...options,
    params: { ...params, ...options?.params },
  });
};

export const getGetUserUsersGetQueryKey = (params: GetUserUsersGetParams) => {
  return [`/users`, ...(params ? [params] : [])] as const;
};

export const getGetUserUsersGetQueryOptions = <
  TData = Awaited<ReturnType<typeof getUserUsersGet>>,
  TError = AxiosError<HTTPValidationError>,
>(
  params: GetUserUsersGetParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getUserUsersGet>>,
        TError,
        TData
      >
    >;
    axios?: AxiosRequestConfig;
  },
) => {
  const { query: queryOptions, axios: axiosOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetUserUsersGetQueryKey(params);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getUserUsersGet>>> = ({
    signal,
  }) => getUserUsersGet(params, { signal, ...axiosOptions });

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getUserUsersGet>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type GetUserUsersGetQueryResult = NonNullable<
  Awaited<ReturnType<typeof getUserUsersGet>>
>;
export type GetUserUsersGetQueryError = AxiosError<HTTPValidationError>;

/**
 * @summary Get User
 */
export const useGetUserUsersGet = <
  TData = Awaited<ReturnType<typeof getUserUsersGet>>,
  TError = AxiosError<HTTPValidationError>,
>(
  params: GetUserUsersGetParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getUserUsersGet>>,
        TError,
        TData
      >
    >;
    axios?: AxiosRequestConfig;
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getGetUserUsersGetQueryOptions(params, options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
};

/**
 * @summary Add User
 */
export const addUserUsersPost = (
  userCreate: UserCreate,
  options?: AxiosRequestConfig,
): Promise<AxiosResponse<AddUserUsersPost200>> => {
  return axios.post(`/users`, userCreate, options);
};

export const getAddUserUsersPostMutationOptions = <
  TError = AxiosError<HTTPValidationError>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof addUserUsersPost>>,
    TError,
    { data: UserCreate },
    TContext
  >;
  axios?: AxiosRequestConfig;
}): UseMutationOptions<
  Awaited<ReturnType<typeof addUserUsersPost>>,
  TError,
  { data: UserCreate },
  TContext
> => {
  const { mutation: mutationOptions, axios: axiosOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof addUserUsersPost>>,
    { data: UserCreate }
  > = (props) => {
    const { data } = props ?? {};

    return addUserUsersPost(data, axiosOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type AddUserUsersPostMutationResult = NonNullable<
  Awaited<ReturnType<typeof addUserUsersPost>>
>;
export type AddUserUsersPostMutationBody = UserCreate;
export type AddUserUsersPostMutationError = AxiosError<HTTPValidationError>;

/**
 * @summary Add User
 */
export const useAddUserUsersPost = <
  TError = AxiosError<HTTPValidationError>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof addUserUsersPost>>,
    TError,
    { data: UserCreate },
    TContext
  >;
  axios?: AxiosRequestConfig;
}) => {
  const mutationOptions = getAddUserUsersPostMutationOptions(options);

  return useMutation(mutationOptions);
};

/**
 * @summary Update User Info
 */
export const updateUserInfoUsersPut = (
  userUpdate: UserUpdate,
  options?: AxiosRequestConfig,
): Promise<AxiosResponse<UpdateUserInfoUsersPut200>> => {
  return axios.put(`/users`, userUpdate, options);
};

export const getUpdateUserInfoUsersPutMutationOptions = <
  TError = AxiosError<HTTPValidationError>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof updateUserInfoUsersPut>>,
    TError,
    { data: UserUpdate },
    TContext
  >;
  axios?: AxiosRequestConfig;
}): UseMutationOptions<
  Awaited<ReturnType<typeof updateUserInfoUsersPut>>,
  TError,
  { data: UserUpdate },
  TContext
> => {
  const { mutation: mutationOptions, axios: axiosOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof updateUserInfoUsersPut>>,
    { data: UserUpdate }
  > = (props) => {
    const { data } = props ?? {};

    return updateUserInfoUsersPut(data, axiosOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type UpdateUserInfoUsersPutMutationResult = NonNullable<
  Awaited<ReturnType<typeof updateUserInfoUsersPut>>
>;
export type UpdateUserInfoUsersPutMutationBody = UserUpdate;
export type UpdateUserInfoUsersPutMutationError =
  AxiosError<HTTPValidationError>;

/**
 * @summary Update User Info
 */
export const useUpdateUserInfoUsersPut = <
  TError = AxiosError<HTTPValidationError>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof updateUserInfoUsersPut>>,
    TError,
    { data: UserUpdate },
    TContext
  >;
  axios?: AxiosRequestConfig;
}) => {
  const mutationOptions = getUpdateUserInfoUsersPutMutationOptions(options);

  return useMutation(mutationOptions);
};

/**
 * @summary Tap
 */
export const tapUsersTapPut = (
  params: TapUsersTapPutParams,
  options?: AxiosRequestConfig,
): Promise<AxiosResponse<TapUsersTapPut200>> => {
  return axios.put(`/users/tap`, undefined, {
    ...options,
    params: { ...params, ...options?.params },
  });
};

export const getTapUsersTapPutMutationOptions = <
  TError = AxiosError<HTTPValidationError>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof tapUsersTapPut>>,
    TError,
    { params: TapUsersTapPutParams },
    TContext
  >;
  axios?: AxiosRequestConfig;
}): UseMutationOptions<
  Awaited<ReturnType<typeof tapUsersTapPut>>,
  TError,
  { params: TapUsersTapPutParams },
  TContext
> => {
  const { mutation: mutationOptions, axios: axiosOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof tapUsersTapPut>>,
    { params: TapUsersTapPutParams }
  > = (props) => {
    const { params } = props ?? {};

    return tapUsersTapPut(params, axiosOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type TapUsersTapPutMutationResult = NonNullable<
  Awaited<ReturnType<typeof tapUsersTapPut>>
>;

export type TapUsersTapPutMutationError = AxiosError<HTTPValidationError>;

/**
 * @summary Tap
 */
export const useTapUsersTapPut = <
  TError = AxiosError<HTTPValidationError>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof tapUsersTapPut>>,
    TError,
    { params: TapUsersTapPutParams },
    TContext
  >;
  axios?: AxiosRequestConfig;
}) => {
  const mutationOptions = getTapUsersTapPutMutationOptions(options);

  return useMutation(mutationOptions);
};

export * from "./index";
