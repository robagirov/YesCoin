/**
 * Generated by orval v6.25.0 üç∫
 * Do not edit manually.
 * Yescoin API
 * Yescoin API description
 * OpenAPI spec version: 1.0
 */
import { useMutation } from '@tanstack/react-query'
import type { MutationFunction, UseMutationOptions } from '@tanstack/react-query'
import { axiosInstance } from '../api/axiosInstance'

type SecondParameter<T extends (...args: any) => any> = Parameters<T>[1]

export const gameControllerStart = (options?: SecondParameter<typeof axiosInstance>) => {
  return axiosInstance<void>({ url: `https://yestoken.space/game/start`, method: 'POST' }, options)
}

export const getGameControllerStartMutationOptions = <
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof gameControllerStart>>,
    TError,
    void,
    TContext
  >
  request?: SecondParameter<typeof axiosInstance>
}): UseMutationOptions<Awaited<ReturnType<typeof gameControllerStart>>, TError, void, TContext> => {
  const { mutation: mutationOptions, request: requestOptions } = options ?? {}

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof gameControllerStart>>,
    void
  > = () => {
    return gameControllerStart(requestOptions)
  }

  return { mutationFn, ...mutationOptions }
}

export type GameControllerStartMutationResult = NonNullable<
  Awaited<ReturnType<typeof gameControllerStart>>
>

export type GameControllerStartMutationError = unknown

export const useGameControllerStart = <TError = unknown, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof gameControllerStart>>,
    TError,
    void,
    TContext
  >
  request?: SecondParameter<typeof axiosInstance>
}) => {
  const mutationOptions = getGameControllerStartMutationOptions(options)

  return useMutation(mutationOptions)
}

export const gameControllerLeave = (options?: SecondParameter<typeof axiosInstance>) => {
  return axiosInstance<void>({ url: `https://yestoken.space/game/leave`, method: 'POST' }, options)
}

export const getGameControllerLeaveMutationOptions = <
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof gameControllerLeave>>,
    TError,
    void,
    TContext
  >
  request?: SecondParameter<typeof axiosInstance>
}): UseMutationOptions<Awaited<ReturnType<typeof gameControllerLeave>>, TError, void, TContext> => {
  const { mutation: mutationOptions, request: requestOptions } = options ?? {}

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof gameControllerLeave>>,
    void
  > = () => {
    return gameControllerLeave(requestOptions)
  }

  return { mutationFn, ...mutationOptions }
}

export type GameControllerLeaveMutationResult = NonNullable<
  Awaited<ReturnType<typeof gameControllerLeave>>
>

export type GameControllerLeaveMutationError = unknown

export const useGameControllerLeave = <TError = unknown, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof gameControllerLeave>>,
    TError,
    void,
    TContext
  >
  request?: SecondParameter<typeof axiosInstance>
}) => {
  const mutationOptions = getGameControllerLeaveMutationOptions(options)

  return useMutation(mutationOptions)
}

export const gameControllerTap = (options?: SecondParameter<typeof axiosInstance>) => {
  return axiosInstance<void>({ url: `https://yestoken.space/game/tap`, method: 'POST' }, options)
}

export const getGameControllerTapMutationOptions = <
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof gameControllerTap>>,
    TError,
    void,
    TContext
  >
  request?: SecondParameter<typeof axiosInstance>
}): UseMutationOptions<Awaited<ReturnType<typeof gameControllerTap>>, TError, void, TContext> => {
  const { mutation: mutationOptions, request: requestOptions } = options ?? {}

  const mutationFn: MutationFunction<Awaited<ReturnType<typeof gameControllerTap>>, void> = () => {
    return gameControllerTap(requestOptions)
  }

  return { mutationFn, ...mutationOptions }
}

export type GameControllerTapMutationResult = NonNullable<
  Awaited<ReturnType<typeof gameControllerTap>>
>

export type GameControllerTapMutationError = unknown

export const useGameControllerTap = <TError = unknown, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof gameControllerTap>>,
    TError,
    void,
    TContext
  >
  request?: SecondParameter<typeof axiosInstance>
}) => {
  const mutationOptions = getGameControllerTapMutationOptions(options)

  return useMutation(mutationOptions)
}

export const playerControllerGetAll = (options?: SecondParameter<typeof axiosInstance>) => {
  return axiosInstance<void>(
    { url: `https://yestoken.space/players/getAll`, method: 'POST' },
    options,
  )
}

export const getPlayerControllerGetAllMutationOptions = <
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof playerControllerGetAll>>,
    TError,
    void,
    TContext
  >
  request?: SecondParameter<typeof axiosInstance>
}): UseMutationOptions<
  Awaited<ReturnType<typeof playerControllerGetAll>>,
  TError,
  void,
  TContext
> => {
  const { mutation: mutationOptions, request: requestOptions } = options ?? {}

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof playerControllerGetAll>>,
    void
  > = () => {
    return playerControllerGetAll(requestOptions)
  }

  return { mutationFn, ...mutationOptions }
}

export type PlayerControllerGetAllMutationResult = NonNullable<
  Awaited<ReturnType<typeof playerControllerGetAll>>
>

export type PlayerControllerGetAllMutationError = unknown

export const usePlayerControllerGetAll = <TError = unknown, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof playerControllerGetAll>>,
    TError,
    void,
    TContext
  >
  request?: SecondParameter<typeof axiosInstance>
}) => {
  const mutationOptions = getPlayerControllerGetAllMutationOptions(options)

  return useMutation(mutationOptions)
}

export const playerControllerCreate = (options?: SecondParameter<typeof axiosInstance>) => {
  return axiosInstance<void>(
    { url: `https://yestoken.space/players/create`, method: 'POST' },
    options,
  )
}

export const getPlayerControllerCreateMutationOptions = <
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof playerControllerCreate>>,
    TError,
    void,
    TContext
  >
  request?: SecondParameter<typeof axiosInstance>
}): UseMutationOptions<
  Awaited<ReturnType<typeof playerControllerCreate>>,
  TError,
  void,
  TContext
> => {
  const { mutation: mutationOptions, request: requestOptions } = options ?? {}

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof playerControllerCreate>>,
    void
  > = () => {
    return playerControllerCreate(requestOptions)
  }

  return { mutationFn, ...mutationOptions }
}

export type PlayerControllerCreateMutationResult = NonNullable<
  Awaited<ReturnType<typeof playerControllerCreate>>
>

export type PlayerControllerCreateMutationError = unknown

export const usePlayerControllerCreate = <TError = unknown, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof playerControllerCreate>>,
    TError,
    void,
    TContext
  >
  request?: SecondParameter<typeof axiosInstance>
}) => {
  const mutationOptions = getPlayerControllerCreateMutationOptions(options)

  return useMutation(mutationOptions)
}

export * from './index'
export * from './model'
